// autogenerated. do not edit.

#include <cstddef>
#include <cstdint>
#include <optional>
#include <set>

using namespace std; // in cc file

const char *test_names[] = {"OK","t","debug","t2","sn","s",};

const char *instr_names[] = {"_","ldppre32","ldppost32","ldppre64","ldppost64","ldrpost32","ldrpost64","ldrpre32","ldrpre64","ldrbpost","ldrbpre","ldrhpost","ldrhpre","ldrsbpost32","ldrsbpost64","ldrsbpre32","ldrsbpre64","ldrshpost32","ldrshpost64","ldrshpre32","ldrshpre64","ldrswpost","ldrswpre","strpost32","strpost64","strpre32","strpre64","strpost","strpre","strhpost","strhpre","stxr32","stxr64","stxrh","stxrb","ldrreg32","ldrreg64","ldrbreg","ldrhreg","ldrsb","ldrshreg32","ldrshreg64","ldrswreg","strreg32","strreg64","strbreg","strhreg",};

static uint32_t check_instr_1(uint32_t instr) {
  if (((( (( (( instr ) >> ( 10 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 5 )) ) & ( 31 )) ))) != 0) { return (3 << 16) | 1; }
  if (((( (( (( instr ) >> ( 0 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 5 )) ) & ( 31 )) ))) != 0) { return (1 << 16) | 1; }
  return 1;
}

static uint32_t check_instr_2(uint32_t instr) {
  if (((( (( (( instr ) >> ( 10 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 5 )) ) & ( 31 )) ))) != 0) { return (3 << 16) | 2; }
  if (((( (( (( instr ) >> ( 0 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 5 )) ) & ( 31 )) ))) != 0) { return (1 << 16) | 2; }
  return 2;
}

static uint32_t check_instr_3(uint32_t instr) {
  if (((( (( (( instr ) >> ( 10 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 5 )) ) & ( 31 )) ))) != 0) { return (3 << 16) | 3; }
  if (((( (( (( instr ) >> ( 0 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 5 )) ) & ( 31 )) ))) != 0) { return (1 << 16) | 3; }
  return 3;
}

static uint32_t check_instr_4(uint32_t instr) {
  if (((( (( (( instr ) >> ( 10 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 5 )) ) & ( 31 )) ))) != 0) { return (3 << 16) | 4; }
  if (((( (( (( instr ) >> ( 0 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 5 )) ) & ( 31 )) ))) != 0) { return (1 << 16) | 4; }
  return 4;
}

static uint32_t check_instr_5(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 5; }
  return 5;
}

static uint32_t check_instr_6(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 6; }
  return 6;
}

static uint32_t check_instr_7(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 7; }
  return 7;
}

static uint32_t check_instr_8(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 8; }
  return 8;
}

static uint32_t check_instr_9(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 9; }
  return 9;
}

static uint32_t check_instr_10(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 10; }
  return 10;
}

static uint32_t check_instr_11(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 11; }
  return 11;
}

static uint32_t check_instr_12(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 12; }
  return 12;
}

static uint32_t check_instr_13(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 13; }
  return 13;
}

static uint32_t check_instr_14(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 14; }
  return 14;
}

static uint32_t check_instr_15(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 15; }
  return 15;
}

static uint32_t check_instr_16(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 16; }
  return 16;
}

static uint32_t check_instr_17(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 17; }
  return 17;
}

static uint32_t check_instr_18(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 18; }
  return 18;
}

static uint32_t check_instr_19(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 19; }
  return 19;
}

static uint32_t check_instr_20(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 20; }
  return 20;
}

static uint32_t check_instr_21(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 21; }
  return 21;
}

static uint32_t check_instr_22(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 22; }
  return 22;
}

static uint32_t check_instr_23(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 23; }
  return 23;
}

static uint32_t check_instr_24(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 24; }
  return 24;
}

static uint32_t check_instr_25(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 25; }
  return 25;
}

static uint32_t check_instr_26(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 26; }
  return 26;
}

static uint32_t check_instr_27(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 27; }
  return 27;
}

static uint32_t check_instr_28(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 28; }
  return 28;
}

static uint32_t check_instr_29(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 29; }
  return 29;
}

static uint32_t check_instr_30(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) != ( 31 )) ))) != 0) { return (2 << 16) | 30; }
  return 30;
}

static uint32_t check_instr_31(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 16 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 5 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( 31 )) ))) != 0) { return (4 << 16) | 31; }
  if (((( (( (( instr ) >> ( 16 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) ))) != 0) { return (5 << 16) | 31; }
  return 31;
}

static uint32_t check_instr_32(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 16 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 5 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( 31 )) ))) != 0) { return (4 << 16) | 32; }
  if (((( (( (( instr ) >> ( 16 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) ))) != 0) { return (5 << 16) | 32; }
  return 32;
}

static uint32_t check_instr_33(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 16 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 5 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( 31 )) ))) != 0) { return (4 << 16) | 33; }
  if (((( (( (( instr ) >> ( 16 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) ))) != 0) { return (5 << 16) | 33; }
  return 33;
}

static uint32_t check_instr_34(uint32_t instr) {
  if (((( (( (( (( instr ) >> ( 16 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 5 )) ) & ( 31 )) )) ) & ( (( (( (( instr ) >> ( 5 )) ) & ( 31 )) ) == ( 31 )) ))) != 0) { return (4 << 16) | 34; }
  if (((( (( (( instr ) >> ( 16 )) ) & ( 31 )) ) == ( (( (( instr ) >> ( 0 )) ) & ( 31 )) ))) != 0) { return (5 << 16) | 34; }
  return 34;
}

static uint32_t check_instr_35(uint32_t instr) {
  if (((( (( (( instr ) >> ( 14 )) ) & ( 1 )) ) == ( 0 ))) != 0) { return (2 << 16) | 35; }
  return 35;
}

static uint32_t check_instr_36(uint32_t instr) {
  if (((( (( (( instr ) >> ( 14 )) ) & ( 1 )) ) == ( 0 ))) != 0) { return (2 << 16) | 36; }
  return 36;
}

static uint32_t check_instr_37(uint32_t instr) {
  if (((( (( (( instr ) >> ( 14 )) ) & ( 1 )) ) == ( 0 ))) != 0) { return (2 << 16) | 37; }
  return 37;
}

static uint32_t check_instr_38(uint32_t instr) {
  if (((( (( (( instr ) >> ( 14 )) ) & ( 1 )) ) == ( 0 ))) != 0) { return (2 << 16) | 38; }
  return 38;
}

static uint32_t check_instr_39(uint32_t instr) {
  if (((( (( (( instr ) >> ( 14 )) ) & ( 1 )) ) == ( 0 ))) != 0) { return (2 << 16) | 39; }
  return 39;
}

static uint32_t check_instr_40(uint32_t instr) {
  if (((( (( (( instr ) >> ( 14 )) ) & ( 1 )) ) == ( 0 ))) != 0) { return (2 << 16) | 40; }
  return 40;
}

static uint32_t check_instr_41(uint32_t instr) {
  if (((( (( (( instr ) >> ( 14 )) ) & ( 1 )) ) == ( 0 ))) != 0) { return (2 << 16) | 41; }
  return 41;
}

static uint32_t check_instr_42(uint32_t instr) {
  if (((( (( (( instr ) >> ( 14 )) ) & ( 1 )) ) == ( 0 ))) != 0) { return (2 << 16) | 42; }
  return 42;
}

static uint32_t check_instr_43(uint32_t instr) {
  if (((( (( (( instr ) >> ( 14 )) ) & ( 1 )) ) == ( 0 ))) != 0) { return (2 << 16) | 43; }
  return 43;
}

static uint32_t check_instr_44(uint32_t instr) {
  if (((( (( (( instr ) >> ( 14 )) ) & ( 1 )) ) == ( 0 ))) != 0) { return (2 << 16) | 44; }
  return 44;
}

static uint32_t check_instr_45(uint32_t instr) {
  if (((( (( (( instr ) >> ( 14 )) ) & ( 1 )) ) == ( 0 ))) != 0) { return (2 << 16) | 45; }
  return 45;
}

static uint32_t check_instr_46(uint32_t instr) {
  if (((( (( (( instr ) >> ( 14 )) ) & ( 1 )) ) == ( 0 ))) != 0) { return (2 << 16) | 46; }
  return 46;
}

static uint32_t check_instr(uint32_t instr) {
  const int DEAD_END = 0;
  if ((instr & 0xf0000000) == 0xf0000000) { return DEAD_END; }
  int instr_bit_0 = (instr & (1 << 31)) != 0;
  int instr_bit_1 = (instr & (1 << 30)) != 0;
  int instr_bit_2 = (instr & (1 << 29)) != 0;
  int instr_bit_3 = (instr & (1 << 28)) != 0;
  int instr_bit_4 = (instr & (1 << 27)) != 0;
  int instr_bit_5 = (instr & (1 << 26)) != 0;
  int instr_bit_6 = (instr & (1 << 25)) != 0;
  int instr_bit_7 = (instr & (1 << 24)) != 0;
  int instr_bit_8 = (instr & (1 << 23)) != 0;
  int instr_bit_9 = (instr & (1 << 22)) != 0;
  int instr_bit_10 = (instr & (1 << 21)) != 0;
  int instr_bit_16 = (instr & (1 << 15)) != 0;
  int instr_bit_20 = (instr & (1 << 11)) != 0;
  int instr_bit_21 = (instr & (1 << 10)) != 0;
  if (instr_bit_4 == 0) {
    return DEAD_END;
  } else {
    if (instr_bit_5 == 0) {
      if (instr_bit_6 == 0) {
        if (instr_bit_0 == 0) {
          if (instr_bit_1 == 0) {
            if (instr_bit_2 == 0) {
              if (instr_bit_3 == 0) {
                if (instr_bit_7 == 0) {
                  if (instr_bit_8 == 0) {
                    if (instr_bit_9 == 0) {
                      if (instr_bit_10 == 0) {
                        if (instr_bit_16 == 0) {
                          return check_instr_34(instr);
                        } else {
                          return DEAD_END;
                        }
                      } else {
                        return DEAD_END;
                      }
                    } else {
                      return DEAD_END;
                    }
                  } else {
                    return DEAD_END;
                  }
                } else {
                  return DEAD_END;
                }
              } else {
                return DEAD_END;
              }
            } else {
              if (instr_bit_3 == 0) {
                if (instr_bit_8 == 0) {
                  return DEAD_END;
                } else {
                  if (instr_bit_9 == 0) {
                    return DEAD_END;
                  } else {
                    if (instr_bit_7 == 0) {
                      return check_instr_1(instr);
                    } else {
                      return check_instr_2(instr);
                    }
                  }
                }
              } else {
                if (instr_bit_7 == 0) {
                  if (instr_bit_8 == 0) {
                    if (instr_bit_9 == 0) {
                      if (instr_bit_10 == 0) {
                        if (instr_bit_21 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_20 == 0) {
                            return check_instr_27(instr);
                          } else {
                            return check_instr_28(instr);
                          }
                        }
                      } else {
                        if (instr_bit_20 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_21 == 0) {
                            return check_instr_45(instr);
                          } else {
                            return DEAD_END;
                          }
                        }
                      }
                    } else {
                      if (instr_bit_10 == 0) {
                        if (instr_bit_21 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_20 == 0) {
                            return check_instr_9(instr);
                          } else {
                            return check_instr_10(instr);
                          }
                        }
                      } else {
                        if (instr_bit_20 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_21 == 0) {
                            return check_instr_37(instr);
                          } else {
                            return DEAD_END;
                          }
                        }
                      }
                    }
                  } else {
                    if (instr_bit_9 == 0) {
                      if (instr_bit_10 == 0) {
                        if (instr_bit_21 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_20 == 0) {
                            return check_instr_14(instr);
                          } else {
                            return check_instr_16(instr);
                          }
                        }
                      } else {
                        if (instr_bit_20 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_21 == 0) {
                            return check_instr_39(instr);
                          } else {
                            return DEAD_END;
                          }
                        }
                      }
                    } else {
                      if (instr_bit_10 == 0) {
                        if (instr_bit_21 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_20 == 0) {
                            return check_instr_13(instr);
                          } else {
                            return check_instr_15(instr);
                          }
                        }
                      } else {
                        if (instr_bit_20 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_21 == 0) {
                            return check_instr_39(instr);
                          } else {
                            return DEAD_END;
                          }
                        }
                      }
                    }
                  }
                } else {
                  return DEAD_END;
                }
              }
            }
          } else {
            if (instr_bit_2 == 0) {
              if (instr_bit_3 == 0) {
                if (instr_bit_7 == 0) {
                  if (instr_bit_8 == 0) {
                    if (instr_bit_9 == 0) {
                      if (instr_bit_10 == 0) {
                        if (instr_bit_16 == 0) {
                          return check_instr_33(instr);
                        } else {
                          return DEAD_END;
                        }
                      } else {
                        return DEAD_END;
                      }
                    } else {
                      return DEAD_END;
                    }
                  } else {
                    return DEAD_END;
                  }
                } else {
                  return DEAD_END;
                }
              } else {
                return DEAD_END;
              }
            } else {
              if (instr_bit_3 == 0) {
                return DEAD_END;
              } else {
                if (instr_bit_7 == 0) {
                  if (instr_bit_8 == 0) {
                    if (instr_bit_9 == 0) {
                      if (instr_bit_10 == 0) {
                        if (instr_bit_21 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_20 == 0) {
                            return check_instr_29(instr);
                          } else {
                            return check_instr_30(instr);
                          }
                        }
                      } else {
                        if (instr_bit_20 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_21 == 0) {
                            return check_instr_46(instr);
                          } else {
                            return DEAD_END;
                          }
                        }
                      }
                    } else {
                      if (instr_bit_10 == 0) {
                        if (instr_bit_21 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_20 == 0) {
                            return check_instr_11(instr);
                          } else {
                            return check_instr_12(instr);
                          }
                        }
                      } else {
                        if (instr_bit_20 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_21 == 0) {
                            return check_instr_38(instr);
                          } else {
                            return DEAD_END;
                          }
                        }
                      }
                    }
                  } else {
                    if (instr_bit_9 == 0) {
                      if (instr_bit_10 == 0) {
                        if (instr_bit_21 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_20 == 0) {
                            return check_instr_18(instr);
                          } else {
                            return check_instr_20(instr);
                          }
                        }
                      } else {
                        if (instr_bit_20 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_21 == 0) {
                            return check_instr_41(instr);
                          } else {
                            return DEAD_END;
                          }
                        }
                      }
                    } else {
                      if (instr_bit_10 == 0) {
                        if (instr_bit_21 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_20 == 0) {
                            return check_instr_17(instr);
                          } else {
                            return check_instr_19(instr);
                          }
                        }
                      } else {
                        if (instr_bit_20 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_21 == 0) {
                            return check_instr_40(instr);
                          } else {
                            return DEAD_END;
                          }
                        }
                      }
                    }
                  }
                } else {
                  return DEAD_END;
                }
              }
            }
          }
        } else {
          if (instr_bit_1 == 0) {
            if (instr_bit_2 == 0) {
              if (instr_bit_3 == 0) {
                if (instr_bit_7 == 0) {
                  if (instr_bit_8 == 0) {
                    if (instr_bit_9 == 0) {
                      if (instr_bit_10 == 0) {
                        if (instr_bit_16 == 0) {
                          return check_instr_31(instr);
                        } else {
                          return DEAD_END;
                        }
                      } else {
                        return DEAD_END;
                      }
                    } else {
                      return DEAD_END;
                    }
                  } else {
                    return DEAD_END;
                  }
                } else {
                  return DEAD_END;
                }
              } else {
                return DEAD_END;
              }
            } else {
              if (instr_bit_3 == 0) {
                if (instr_bit_8 == 0) {
                  return DEAD_END;
                } else {
                  if (instr_bit_9 == 0) {
                    return DEAD_END;
                  } else {
                    if (instr_bit_7 == 0) {
                      return check_instr_3(instr);
                    } else {
                      return check_instr_4(instr);
                    }
                  }
                }
              } else {
                if (instr_bit_7 == 0) {
                  if (instr_bit_8 == 0) {
                    if (instr_bit_9 == 0) {
                      if (instr_bit_10 == 0) {
                        if (instr_bit_21 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_20 == 0) {
                            return check_instr_23(instr);
                          } else {
                            return check_instr_25(instr);
                          }
                        }
                      } else {
                        if (instr_bit_20 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_21 == 0) {
                            return check_instr_43(instr);
                          } else {
                            return DEAD_END;
                          }
                        }
                      }
                    } else {
                      if (instr_bit_10 == 0) {
                        if (instr_bit_21 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_20 == 0) {
                            return check_instr_5(instr);
                          } else {
                            return check_instr_7(instr);
                          }
                        }
                      } else {
                        if (instr_bit_20 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_21 == 0) {
                            return check_instr_35(instr);
                          } else {
                            return DEAD_END;
                          }
                        }
                      }
                    }
                  } else {
                    if (instr_bit_9 == 0) {
                      if (instr_bit_10 == 0) {
                        if (instr_bit_21 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_20 == 0) {
                            return check_instr_21(instr);
                          } else {
                            return check_instr_22(instr);
                          }
                        }
                      } else {
                        if (instr_bit_20 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_21 == 0) {
                            return check_instr_42(instr);
                          } else {
                            return DEAD_END;
                          }
                        }
                      }
                    } else {
                      return DEAD_END;
                    }
                  }
                } else {
                  return DEAD_END;
                }
              }
            }
          } else {
            if (instr_bit_2 == 0) {
              if (instr_bit_3 == 0) {
                if (instr_bit_7 == 0) {
                  if (instr_bit_8 == 0) {
                    if (instr_bit_9 == 0) {
                      if (instr_bit_10 == 0) {
                        if (instr_bit_16 == 0) {
                          return check_instr_32(instr);
                        } else {
                          return DEAD_END;
                        }
                      } else {
                        return DEAD_END;
                      }
                    } else {
                      return DEAD_END;
                    }
                  } else {
                    return DEAD_END;
                  }
                } else {
                  return DEAD_END;
                }
              } else {
                return DEAD_END;
              }
            } else {
              if (instr_bit_3 == 0) {
                return DEAD_END;
              } else {
                if (instr_bit_7 == 0) {
                  if (instr_bit_8 == 0) {
                    if (instr_bit_9 == 0) {
                      if (instr_bit_10 == 0) {
                        if (instr_bit_21 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_20 == 0) {
                            return check_instr_24(instr);
                          } else {
                            return check_instr_26(instr);
                          }
                        }
                      } else {
                        if (instr_bit_20 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_21 == 0) {
                            return check_instr_44(instr);
                          } else {
                            return DEAD_END;
                          }
                        }
                      }
                    } else {
                      if (instr_bit_10 == 0) {
                        if (instr_bit_21 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_20 == 0) {
                            return check_instr_6(instr);
                          } else {
                            return check_instr_8(instr);
                          }
                        }
                      } else {
                        if (instr_bit_20 == 0) {
                          return DEAD_END;
                        } else {
                          if (instr_bit_21 == 0) {
                            return check_instr_36(instr);
                          } else {
                            return DEAD_END;
                          }
                        }
                      }
                    }
                  } else {
                    return DEAD_END;
                  }
                } else {
                  return DEAD_END;
                }
              }
            }
          }
        }
      } else {
        return DEAD_END;
      }
    } else {
      return DEAD_END;
    }
  }
  return DEAD_END;
}

static constexpr bool is_uncond_jump(uint32_t instr) {
    // either B or BL: x00101
    return ((instr >> 26) & 0b011111) == 0b000101;
}

static constexpr bool is_cond19_jump(uint32_t instr) {
    const uint32_t instrL24 = instr >> 24;
    // 01010100
    const bool is_Bcond = instrL24 == 0b01010100;

    // x011010x
    const bool is_CBxx = (instrL24 & 0b01111110) == 0b00110100;
    return is_Bcond || is_CBxx;
}

static constexpr bool is_cond14_jump(uint32_t instr) {
    // x011011
    return ((instr >> 25) & 0b0111111) == 0b0011011;
}

optional<int32_t> get_jump_target(uint32_t instr) {
	if (is_uncond_jump(instr)) {
		// sign extension
        const bool neg = instr & (1u << 25);
        int32_t ret = -(neg ? (1 << 26) : 0);
        ret += instr & ((1u << 26) - 1);
        return ret;
	}

	// conditional branch other than TBxx
	if (is_cond19_jump(instr)) {
		// sign extension
        const bool neg = instr & (1u << 23);
        int32_t ret = -(neg ? (1 << 19) : 0);
        ret += (instr >> 5) & ((1u << 19) - 1);
        return ret;
	}

    // TBNZ and TBZ
    if (is_cond14_jump(instr)) {
        // sign extension
        const bool neg = instr & (1u << 18);
        int32_t ret = -(neg ? (1 << 14) : 0);
        ret += (instr >> 5) & ((1u << 14) - 1);
        return ret;
    }

	return {};
}

set<size_t> get_all_targets(const uint32_t *buf, size_t len) {
	set<size_t> ret{};
	for (size_t idx = 0; idx < len; ++idx) {
        const auto targ = get_jump_target(buf[idx]);
        if (targ.has_value()) {
            ret.insert(idx + *targ);
        }
    }
    return ret;
}

extern "C"
bool proton_armcheck_check_buffer(const uint32_t *buf, size_t len,
								  size_t *fail_idx,
								  const char **fail_instr_name,
								  const char **fail_test_name) {
	bool valid = true;
    const auto targs = get_all_targets(buf, len);
    auto next_targ = targs.cbegin();
    for (size_t idx = 0; idx < len; ++idx) {
        const auto &instr = buf[idx];

		if ((next_targ != targs.cend()) && (idx == *next_targ)) {
			valid = true; // if this is a jump target, turn the scanner back on
			next_targ++;  // also, go to the next jump target
		}

        if (valid) {
            const auto ret = check_instr(instr);
            if ((ret >> 16) != 0) {
                *fail_idx = idx;
                *fail_instr_name = instr_names[ret & 0xffff];
                *fail_test_name = test_names[(ret >> 16) & 0xffff];
                return false;
            }
        }

        if (is_uncond_jump(instr)) {
            valid = false;
        }
	}

    return true;
}
